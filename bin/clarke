#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'

require_relative '../lib/clarke'

options = {}
OptionParser.new do |opts|
  opts.banner = 'usage: clarke interpret [options] [filename]'

  opts.on('-v', '--[no-]verbose', 'Run verbosely') do |v|
    options[:verbose] = v
  end
end.parse!

if ARGV.size != 2
  warn 'usage: clarke interpret [filename]'
  exit 1
end

args = {
  cmd: ARGV[0],
  filename: ARGV[1],
}

res = Clarke::Grammar::PROGRAM.apply(File.read(args.fetch(:filename)))
if res.is_a?(DParse::Failure)
  warn res.pretty_message
  exit 1
end

case args.fetch(:cmd)
when 'interpret'
  begin
    local_depths = {}
    stack = Clarke::TransformerStack.new([
      Clarke::Transformers::SimplifyOpSeq.new,
      Clarke::Transformers::BuildScopes.new(local_depths),
    ],)
    exprs = stack.transform_exprs(res.data)
    exprs.each { |e| p e } if options[:verbose]

    evaluator = Clarke::Evaluator.new(local_depths)
    evaluator.eval_exprs(exprs)
  rescue Clarke::Language::Error => e
    warn e.fancy_message.to_s
    exit 1
  end
end
